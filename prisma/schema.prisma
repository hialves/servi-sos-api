generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  admin
  customer
  manager
}

enum PaymentStatus {
  pending
  processing
  success
  payment_failed
}

model Admin {
  id         Int                    @id @default(autoincrement())
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  name       String                 @db.VarChar
  email      String                 @db.VarChar
  assetId    Int?                   @unique
  userId     Int?                   @unique
  externalId String                 @unique @default(uuid()) @db.Uuid()
  asset      Asset?                 @relation(fields: [assetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User?                  @relation(fields: [userId], references: [id])
  orders     Order[]
  config     ServiceProviderConfig?
}

model ServiceProviderConfig {
  serviceProviderId      Int                                   @id
  createdAt              DateTime                              @default(now())
  updatedAt              DateTime                              @updatedAt
  lat                    Float?
  long                   Float?
  coordinates            Unsupported("geometry(Point, 4326)")?
  firebaseUserIdentifier String?
  serviceProvider        Admin                                 @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories             ServiceProviderCategory[]
}

model ServiceProviderCategory {
  serviceProvider   ServiceProviderConfig @relation(fields: [serviceProviderId], references: [serviceProviderId])
  serviceProviderId Int
  category          Category              @relation(fields: [categoryId], references: [id])
  categoryId        Int
  createdAt         DateTime              @default(now())

  @@id([serviceProviderId, categoryId])
}

model Asset {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  filename   String    @db.VarChar
  source     String    @db.VarChar
  mimeType   String    @db.VarChar
  externalId String    @unique @default(uuid()) @db.Uuid()
  admin      Admin?
  customer   Customer?
}

model Customer {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  name                   String   @db.VarChar
  email                  String   @db.VarChar
  phone                  String?  @db.VarChar
  assetId                Int?     @unique
  userId                 Int?     @unique
  externalId             String   @unique @default(uuid()) @db.Uuid()
  paymentCustomerId      String?
  defaultPaymentMethodId String?
  firebaseUserIdentifier String?
  user                   User?    @relation(fields: [userId], references: [id])
  asset                  Asset?   @relation(fields: [assetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders                 Order[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique @db.VarChar
  expiresAt DateTime @db.Timestamp(6)
  device    String?  @db.VarChar
  ip        String?  @db.VarChar
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id                         Int       @id @default(autoincrement())
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  password                   String?   @db.VarChar
  email                      String    @unique @db.VarChar
  recoverPasswordToken       String?   @db.VarChar
  recoverPasswordTokenExpire DateTime? @db.Timestamp
  googleId                   String?   @unique @db.VarChar
  lastLogin                  DateTime? @db.Timestamp
  externalId                 String    @unique @default(uuid()) @db.Uuid()
  role                       Role?
  admin                      Admin?
  customer                   Customer?
  sessions                   Session[]
}

model Category {
  id               Int                       @id @default(autoincrement())
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  name             String
  parentId         Int?
  isFinal          Boolean                   @default(false)
  parent           Category?                 @relation("Subcategory", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children         Category[]                @relation("Subcategory")
  orders           Order[]
  serviceProviders ServiceProviderCategory[]
}

model Order {
  id                    Int                                  @id @default(autoincrement())
  createdAt             DateTime                             @default(now())
  updatedAt             DateTime                             @updatedAt
  lat                   Float
  long                  Float
  coordinates           Unsupported("geometry(Point, 4326)")
  done                  Boolean                              @default(false)
  published             Boolean                              @default(false)
  publishedAt           DateTime?                             
  paymentStatus         PaymentStatus                        @default(pending)
  price                 Int
  agreedPrice           Int?
  description           String?
  externalId            String                               @unique @default(uuid()) @db.Uuid()
  categoryId            Int?
  customerId            Int?
  serviceProviderId     Int?
  paymentGatewayOrderId String?
  category              Category?                            @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customer              Customer?                            @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceProvider       Admin?                               @relation(fields: [serviceProviderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
