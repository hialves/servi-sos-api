generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  admin
  customer
  manager
}

model Admin {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @db.VarChar
  email      String   @db.VarChar
  assetId    Int?     @unique
  userId     Int?     @unique
  externalId String   @unique @default(uuid()) @db.Uuid()
  asset      Asset?   @relation(fields: [assetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User?    @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Asset {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  filename   String    @db.VarChar
  source     String    @db.VarChar
  mimeType   String    @db.VarChar
  externalId String    @unique @default(uuid()) @db.Uuid()
  admin      Admin?
  customer   Customer?
}

model Customer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @db.VarChar
  email      String   @db.VarChar
  phone      String?  @db.VarChar
  assetId    Int?     @unique
  userId     Int?     @unique
  externalId String   @unique @default(uuid()) @db.Uuid()
  user       User?    @relation(fields: [userId], references: [id])
  asset      Asset?   @relation(fields: [assetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders     Order[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique @db.VarChar
  expiresAt DateTime @db.Timestamp(6)
  device    String?  @db.VarChar
  ip        String?  @db.VarChar
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id                         Int       @id @default(autoincrement())
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  password                   String?   @db.VarChar
  email                      String    @unique @db.VarChar
  recoverPasswordToken       String?   @db.VarChar
  recoverPasswordTokenExpire DateTime? @db.Timestamp
  googleToken                String?   @db.VarChar
  lastLogin                  DateTime? @db.Timestamp
  externalId                 String    @unique @default(uuid()) @db.Uuid()
  role                       Role?
  admin                      Admin?
  customer                   Customer?
  sessions                   Session[]
}

model Category {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  name      String
  parentId  Int?
  isFinal   Boolean    @default(false)
  parent    Category?  @relation("Subcategory", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Category[] @relation("Subcategory")
  orders    Order[]
}

model Order {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lat               Float
  long              Float
  done              Boolean   @default(false)
  price             Decimal   @db.Decimal(10, 4)
  agreedPrice       Decimal?   @db.Decimal(10, 4)
  externalId        String    @unique @default(uuid()) @db.Uuid()
  categoryId        Int?
  customerId        Int?
  serviceProviderId Int?
  category          Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customer          Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceProvider   Admin?    @relation(fields: [serviceProviderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
